<?php

use Drupal\bricks\Bricks;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Prepares variables for `field.html.twig`.
 */
function bricks_preprocess_field(&$variables) {
  $element = $variables['element'];
  if (substr($element['#formatter'], 0,  7) === 'bricks_') {
    $variables['items'] = [
      [
        'content' => Bricks::nestItems($variables['items'], $variables['element']['#items']),
      ],
    ];
  }
}

/* BRICKS EDITING */

/**
 * Implements hook_field_widget_info_alter().
 */
function bricks_field_widget_info_alter(array &$info) {
  // Let Bricks to re-use ANY Entity Reference -compatible widgets:
  foreach ($info as $widget_id => &$widget_info) {
    if (in_array('entity_reference', $widget_info['field_types'])) {
      $widget_info['field_types'][] = 'bricks';
    }
    if (in_array('entity_reference_revisions', $widget_info['field_types'])) {
      $widget_info['field_types'][] = 'bricks_revisioned';
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for `entity_reference_autocomplete`.
 */
function bricks_field_widget_entity_reference_autocomplete_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_type = $context['items']->getFieldDefinition()->getType();

  // @TODO: Replace by 'Nested bricks' widget setting.
  if (in_array($field_type, ['bricks'])) {
    // @TODO: Find a better way to be used in _bricks_preprocess_tabledrag_form().
    $element['#widget'] = 'entity_reference_autocomplete';
    // #default_value is en Entity or NULL.
    _bricks_form_element_alter($element, $context['items'][$context['delta']], $element['target_id']['#default_value']);
    hide($element['depth']);
  }
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for `bricks_tree_autocomplete`.
 */
function bricks_field_widget_bricks_tree_autocomplete_form_alter(&$element, FormStateInterface $form_state, $context) {
  bricks_field_widget_entity_reference_autocomplete_form_alter($element, $form_state, $context);
}

/**
 * Prepares variables for `field-multiple-value-form.html.twig`.
 */
function bricks_preprocess_field_multiple_value_form(&$variables) {
  _bricks_preprocess_tabledrag_form($variables, 'element', 'entity_reference_autocomplete', $variables['element']['#field_name'] . '-delta-order');
  _bricks_preprocess_tabledrag_form($variables, 'element', 'paragraphs', $variables['element']['#field_name'] . '-delta-order');

  if (isset($variables['element']['#widget']) && $variables['element']['#widget'] === 'bricks_tree_paragraphs') {
    _bricks_preprocess_bricks_tree_paragraphs_widget($variables);
  }
}

/**
 * Helper preprocess function for the bricks_tree_paragraphs tabledrag form.
 */
function _bricks_preprocess_bricks_tree_paragraphs_widget(&$variables) {
  // Paragraphs module is going to remove its order column in this case, so we
  // shouldn't bother altering it.
  // @see paragraphs_preprocess_field_multiple_value_form()
  if ((isset($variables['element']['#allow_reference_changes']) && !$variables['element']['#allow_reference_changes']) || (isset($variables['element']['#cardinality']) && $variables['element']['#cardinality'] == 1) || (isset($variables['table']['#rows']) && count($variables['table']['#rows']) == 0)) {
    // Do nothing; paragraphs module will get rid of tabledrag anyway.
  }
  else {
    $table = &$variables['table'];
    // Add header columns for tabledrag data.
    $table['#header'][] = t('Depth');
    $table['#header'][] = [
      'data' => t('Parent'),
      'class' => 'hidden'
    ];

    // We need to turn the regular tabledrag set up by
    // template_preprocess_field_multiple_value_form() into a tabledrag that
    // handles not just order but also depth.

    // This makes tabledrag keep track of indentation; we'll give it a
    // FAPI element to store the data in later.
    $table['#tabledrag'][] = [
      'action' => 'depth',
      'relationship' => 'group',
      'group' => 'bricks-depth',
    ];
    // Tabledrag always expects to see a parent column if it's being asked
    // to keep track of depth. (It assumes anyone who cares about depth has
    // hierarchical data.) We will give it a fake FAPI element to put its
    // data into, but we don't want that data and won't store it anywhere.
    $table['#tabledrag'][] = [
      'action' => 'match',
      'relationship' => 'parent',
      'group' => 'tablesort-fake-parent',
    ];
    // We're now in kind of a funny situation: because we told tabledrag
    // we want to keep track of parent data, it now thinks we want the weight
    // data divided up by parent (the way it works for, say, taxonomy terms).
    // We have to tell it no, we want to number the rows from the top to the
    // bottom regardless of hierarchy. This requires some bricks-specific JS.
    $table['#tabledrag'][0]['relationship'] = 'all';
    $table['#attached']['library'][] = 'bricks/tabledrag.relationship-all';

    // We've now told tabledrag to expect depth and parent columns, so we'll
    // add cells for those columns to every row.
    foreach ($table['#rows'] as &$row) {
      // Move the depth element into its own column.
      if (!isset($row['data'][1]['data']['depth'])) {
        continue;
      }
      $depth_element = $row['data'][1]['data']['depth'];
      $row['data'][] = [
        'data' => $depth_element,
      ];
      unset($row['data'][1]['data']['depth']);

      // Create a parent column with a fake element.
      $row['data'][] = [
        'data' => [
          '#type' => 'hidden',
          '#size' => 5,
          '#default_value' => 0,
          '#attributes' => ['class' => ['tablesort-fake-parent']]
        ],
      ];

      // Also, fix the column with the drag handle so that it can handle
      // the depth/indentation data.
      $depth = $depth_element['#value'];
      $indentation = [];
      if ($depth > 0) {
        $indentation = [
          '#theme' => 'indentation',
          '#size' => $depth,
        ];
      }
      $drag_cell = &$row['data'][0];
      $drag_cell['style'] = 'width: auto; min-width: 8em';
      $drag_cell['data'] = !empty($indentation) ? \Drupal::service('renderer')->render($indentation) : '' . $drag_cell['data'];
    }
  }

}

/**
 * Helper function for hook_preprocess_field_multiple_value_form().
 */
function _bricks_preprocess_tabledrag_form(&$variables, $element_key, $widget, $order_class, $render_options = FALSE) {
  $element = $variables[$element_key];
  $operation_key = NULL;

  // @TODO: Replace by 'Nested bricks' widget setting.
  if (isset($element['#widget']) && $element['#widget'] == $widget ||
    isset($element[0]['#widget']) && $element[0]['#widget'] == $widget) {
    // @TODO: Tmp hack for the proper indent width calculation.
    $variables['table']['#header'][0]['style'] = 'min-width: 150px';
    $variables['table']['#header'][] = ['data' => t('Depth'), 'class' => ['bricks-depth-header']];
    if ($render_options) {
      // Find Operations column
      $operation_key = array_filter($variables['table']['#header'], function($item) {
        return isset($item['is_operation']);
      });

      if (!empty($operation_key) && is_array($operation_key)) {
        $operation_key = array_keys($operation_key);
        $operation_key = array_pop($operation_key);
        // Insert new options column before operations.
        array_splice($variables['table']['#header'], $operation_key, 0, [['data' => t('Options')]]);
      }
    }

    $row = 0;
    foreach (Element::children($element) as $i => $key) {
      if ($key !== 'add_more' && $key !== 'header_actions') {
        $depth = $element[$key]['depth']['#value'];

        $indentation = [];
        if ($depth > 0) {
          $indentation = [
            '#theme' => 'indentation',
            '#size' => $depth,
          ];
        }

        $drag_cell = &$variables['table']['#rows'][$row]['data'][0];
        $drag_cell['data'] = !empty($indentation) ? \Drupal::service('renderer')->render($indentation) : '' . $drag_cell['data'];
        // @TODO
        $drag_cell['style'] = 'width: auto; min-width: 150px';

        show($element[$key]['depth']);
        $variables['table']['#rows'][$row]['data'][] = \Drupal::service('renderer')->render($element[$key]['depth']);

        if ($render_options && !is_null($operation_key)) {
          // Insert data row in options column.
          array_splice($variables['table']['#rows'][$row]['data'], $operation_key, 0,[['data' => \Drupal::service('renderer')->render($element[$key]['options']), 'class' => 'inline-entity-form-brick-options']]);
        }

      }
      if ($key !== 'add_more') {
        $row++;
      }
    }

    $tabledrag_options = &$variables['table']['#tabledrag'];
    $tabledrag_options[0]['relationship'] = 'all';
    $tabledrag_options[] = [
      'action' => 'depth',
      'relationship' => 'group',
      'group' => 'bricks-depth',
    ];
    // Fake option to enable indentation:
    $tabledrag_options[] = [
      'action' => 'match',
      'relationship' => 'parent',
      'group' => $order_class,
    ];

    $variables['table']['#attached']['library'][] = 'bricks/tabledrag.relationship-all';
  }
}

/**
 * Helper function for widget's formElement().
 */
function _bricks_form_element_alter(&$element, $item, $entity) {
  $element['depth'] = [
  // @TODO: Other types break the correct indentations.
    '#type' => 'hidden',
    '#default_value' => !empty($item->depth) ? $item->depth : 0,
    '#weight' => 10,
    '#attributes' => [
      'class' => ['bricks-depth'],
    ],
  ];
  $element['options'] = [
    '#type' => 'container',
    '#weight' => 100,
    '#attributes' => [
      'class' => ['container-inline'],
    ],
  ];
  if ($entity) {
    if ($entity->bundle() == 'layout' && \Drupal::service('module_handler')->moduleExists('layout_discovery')) {
      $element['options']['layout'] = [
        '#type' => 'select',
        '#options' => \Drupal::service('plugin.manager.core.layout')->getLayoutOptions(),
        '#default_value' => !empty($item->options['layout']) ? $item->options['layout'] : NULL,
      ];
    }
    if ($entity->bundle() != 'layout') {
      $element['options']['view_mode'] = [
        '#type' => 'select',
        '#options' => \Drupal::service('entity_display.repository')->getViewModeOptionsByBundle($entity->getEntityTypeId(), $entity->bundle()),
        '#default_value' => !empty($item->options['view_mode']) ? $item->options['view_mode'] : NULL,
      ];
    }
  }
  $element['options']['css_class'] = [
    '#type' => 'textfield',
    '#default_value' => !empty($item->options['css_class']) ? $item->options['css_class'] : '',
    '#size' => 10,
    '#attributes' => [
      'placeholder' => t('CSS class(-es)'),
    ],
  ];
}

/* MISC */

/**
 * Prepares variables for `block.html.twig` for `system_powered_by_block`.
 */
function bricks_preprocess_block__system_powered_by_block(&$variables) {
  $bricks_link = '<a href="https://uibricks.com">Bricks</a>';
  $variables['content']['#markup'] = str_replace('>Drupal</a>', '>Drupal</a> & ' . $bricks_link, $variables['content']['#markup']);
}
